- name: check the connection with virtual machines through ssh protocol
  hosts:
      - management
      - routers
      - ssh_nodes
  strategy: free
  gather_facts: no

  tasks:
  - ping:
    register: result
    until: result is not failed
    retries: 25
    delay: 60

- name: Install Chrony on MAN node
  hosts: man
  strategy: free
  gather_facts: no
  become: yes
  become_user: root

  tasks:
    - name: Run apt update
      apt:
        update_cache: yes

    - name: Install Chrony
      apt:
        name: chrony

- name: NAT on MAN node
  hosts: man
  strategy: free
  gather_facts: yes
  become: yes
  become_user: root
  roles:
  - role: kypo-man-logging-forward
    kmlf_syslog_target_host: "{{ kypo_global_head_ip }}"

  tasks:
  - name: get interface of default gateway
    shell: ip route list | grep ^default | head -n 1
    changed_when: False
    register: default_gateway

  - set_fact:
      default_gateway_interface: '{{ default_gateway.stdout | regex_search("(?<=dev )[^ ]+") }}'
  - set_fact:
      default_gateway_interface_ip: '{{ ansible_facts[default_gateway_interface]["ipv4"]["address"] }}'

  - name: setup NAT
    include_role:
      name: iptables
    vars:
      iptables_rules:
        - table: nat
          chain: POSTROUTING
          out_interface: '{{ default_gateway_interface }}'
          jump: MASQUERADE

- name: Sandbox networking
  hosts:
  - management
  - routers
  strategy: free
  gather_facts: yes
  become: yes
  become_user: root

  roles:
  - role: kypo-interface
    kypo_interface_interfaces: '
    {%- import "roles/kypo-common/templates/network.j2" as network with context -%}
    {%- set variables = namespace(
      interfaces = [],
      routes = [],
    ) -%}
    {%- if interfaces is defined and interfaces -%}
      {%- for interface in interfaces -%}
        {%- set variables.routes = [] -%}
        {%- if interface.routes is defined and interface.routes -%}
          {%- for route in interface.routes -%}
            {%- set variables.routes = variables.routes + [{
              "gateway": route.gw,
              "mask": route.mask,
              "network": route.net
            }] -%}
          {%- endfor -%}
        {%- endif -%}
        {%- set variables.interfaces = variables.interfaces + [{
          "kypo_interface_default_gateway": interface.def_gw_ip,
          "kypo_interface_mac": interface.mac,
          "kypo_interface_routes": variables.routes
        }] -%}
      {%- endfor -%}
    {%- endif -%}
    {%- set inventory_mac_addresses = interfaces | map(attribute="mac") | list -%}
    {%- set the_rest_mac_addresses = network.kypo_common_network.interfaces |
      selectattr("macaddress", "defined") |
      rejectattr("macaddress", "in", inventory_mac_addresses) |
      map(attribute="macaddress") | list
    -%}
    {%- for mac_address in the_rest_mac_addresses -%}
      {%- set variables.interfaces = variables.interfaces + [{
        "kypo_interface_mac": mac_address,
      }] -%}
    {%- endfor -%}
    {{ variables.interfaces }}'

  tasks:
  - name: set ip forward
    sysctl:
      name: net.ipv4.ip_forward
      value: '{% if ip_forward %}1{% else %}0{% endif %}'
    when: ip_forward is defined

- name: Test sandbox networking
  hosts:
  - management
  - routers
  - ssh_nodes
  strategy: free
  become: yes
  become_user: root

  tasks:
  - command: 'ping {{ hostvars["man"]["default_gateway_interface_ip"] }} -c 3'
    changed_when: False

- name: User access
  hosts:
  - man
  - uan
  strategy: free
  gather_facts: no
  become: yes
  become_user: root
  vars:
    user_name: user-access

  roles:
    - role: kypo-user-access
      kypo_user_access_username: '{{ user_name }}'

- name: check the connection with virtual machines through winrm protocol
  hosts: winrm_nodes
  strategy: free
  gather_facts: no

  tasks:
  - name: wait till the remote machine accepts connections
    wait_for_connection:
      delay: 500

  - name: execute ping on remote machine
    win_ping:
    register: result
    until: result is not failed
    retries: 25
    delay: 60

  - name: test sandbox networking
    win_command: 'ping {{ hostvars["man"]["default_gateway_interface_ip"] }}'

  - name: enforce windows license activation
    win_command: 'cscript C:\Windows\System32\slmgr.vbs //B /ato'

