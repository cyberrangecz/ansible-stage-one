
- name: get detail information about interfaces from system
  set_fact:
      network_interfaces: >
          {%- set interfaces = namespace(details=[]) -%}
          {%- for interface in ansible_interfaces -%}
              {%- set interfaces.details = interfaces.details + [hostvars[inventory_hostname]['ansible_' + interface]] -%}
          {%- endfor -%}{{ interfaces.details }}

- name: get interface name using mac address
  set_fact:
      network_interface: >-
          {{
              (
                  network_interfaces | selectattr('macaddress', 'defined') |
                  selectattr('macaddress', 'equalto', iface['mac']) | map(attribute='device') | list
              ) [0] | default('')
          }}

- name: remove old iface settings for retrieved interface name
  replace:
      path: '{{ item }}'
      regexp: ^iface[ \t]{{ network_interface }}[ \t].*(\n[ \t]+.*)*
  notify: network_restart
  with_items:
      - '{{ network_interfaces_file }}'
      - '{{ network_interfaces_default_file }}'
  when: network_interface != ''

- name: remove the rest of old settings for retrieved interface name
  replace:
      path: '{{ item }}'
      regexp: '^.*(?<=\s){{ network_interface }}(?=\s).*$'
  notify: network_restart
  with_items:
      - '{{ network_interfaces_file }}'
      - '{{ network_interfaces_default_file }}'
  when: network_interface != ''

- name: remove multiple consecutive new line characters
  replace:
      path: '{{ item }}'
      regexp: '(\n)+'
      replace: '\n'
  with_items:
      - '{{ network_interfaces_file }}'
      - '{{ network_interfaces_default_file }}'

- name: configure interface
  blockinfile:
      path: '{{ network_interfaces_file }}'
      create: yes
      marker: '# {mark} {{ network_interface }}'
      block: |
          allow-hotplug {{ network_interface }}
          auto {{ network_interface }}
          iface {{ network_interface }} inet dhcp
              mtu 1450
              {% if 'def_gw_ip' in iface and iface['def_gw_ip'] -%}
              gateway {{ iface['def_gw_ip'] }}
              up route add default gw {{ iface['def_gw_ip'] }} 
              {% endif -%}
              {% if 'routes' in iface -%}
              {% for route in iface['routes'] -%}
              post-up route add -net {{ route['net'] }} netmask {{ route['mask'] }} gw {{ route['gw'] }}
              pre-down route del -net {{ route['net'] }} netmask {{ route['mask'] }} gw {{ route['gw'] }}
              {% endfor %}
              {% endif %}
  notify: network_restart
  when: network_interface != ''

